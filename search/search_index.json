{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"I am documenting all my learnings here and if they are helpful for some other people on the internet, I am more than happy","text":""},{"location":"all-about-rest-apis/","title":"This section shares all my learnings about the development and maintenance aspects of RESTful APIs","text":"<p>1. Important aspects of developing great REST APIs</p> <p>2. Using Appropriate Http verb for designing RESTful APIs</p>"},{"location":"appropriate-http-verbs/","title":"Appropriate http verbs","text":"<p>Using appropriate HTTP verb is very important in designing REST APIs. Here's a quick overview of best practices for designing REST APIs</p> <p>When creating resources, POST or PUT requests can be used. It's important to note that POST requests are not idempotent, as they are used for creating new resources each time they are called.</p> <p>For reading resources, GET or POST requests can be used. POST requests are particularly helpful when the number of parameters is high, or the values of parameters are not easily exposable in a GET request.</p> <p>When updating resources, PUT or PATCH requests can be used. PATCH requests are useful for partial updates.</p> <p>Finally, for deleting resources, obviously DELETE requests should be used.</p>"},{"location":"custom-hook-context-api/","title":"How to create your own custom hook for the context api","text":"<p>You can create your own custom hook for the code that initilizes the context api.</p>"},{"location":"custom-hook-context-api/#steps-to-create-custom-hook","title":"Steps to create custom hook","text":"<ol> <li> <p>Create a context using React.createContext() API</p> </li> <li> <p>Create a functional component accepting 'children' as argument. This functional component will be your context provider.</p> </li> <li> <p>Inside the return function of context provider, wrap all the children within the context.</p> </li> <li> <p>Initialize the 'vaule' attribute of the context provider.</p> </li> </ol>"},{"location":"custom-hook-context-api/#example-code","title":"Example code","text":"<pre><code>import React, { useContext, useState } from \"react\";\n\nconst ThemeContext = React.createContext();\nconst ThemeUpdateContext = React.createContext();\n\nexport function useTheme() {\n  return useContext(ThemeContext);\n}\n\nexport function useThemeUpdate() {\n  return useContext(ThemeUpdateContext);\n}\n\nexport function ThemeProvider({ children }) {\n  const [darkTheme, setDarkTheme] = useState(true);\n\n  function toggleTheme() {\n    setDarkTheme((preDarkTheme) =&gt; !preDarkTheme);\n  }\n  return (\n    &lt;ThemeContext.Provider value={darkTheme}&gt;\n      &lt;ThemeUpdateContext.Provider value={toggleTheme}&gt;\n        {children}\n      &lt;/ThemeUpdateContext.Provider&gt;\n    &lt;/ThemeContext.Provider&gt;\n  );\n}\n</code></pre>"},{"location":"custom-hook-context-api/#explanation","title":"Explanation","text":"<ol> <li> <p>The above code is creating two instances of context</p> <ol> <li>one for providing 'theme' value</li> <li>another one for providing a method to update the theme value.</li> </ol> </li> <li> <p>Here two custom hooks are created 'useTheme' and 'useThemeUpdate'</p> <ol> <li>'useTheme' hooks is calling 'useContext' react hook and passing the 'ThemeContext' as the argument and returning</li> <li>'useThemeUpdate' hook is calling 'useContext' react hook and passing the 'ThemeUpdateContext' as the argument and returning</li> </ol> </li> <li> <p>The functional component 'ThemeProvider' accepting 'children' as the argument and wrapping the 'children' within the 'ThemeContext.Provider' and 'ThemeUpdateContext.Provider'</p> </li> </ol>"},{"location":"how-to-create-context-provider/","title":"How to create context provider","text":""},{"location":"how-to-create-context-provider/#context-api","title":"Context API","text":"<p>React Context APIs are one of the ways to manage application state globally</p> <ol> <li>How to create a context</li> </ol> <pre><code>const applicationContext = React.createContext();\n</code></pre> <ol> <li>Using context APIs, we can pass down the values to all the componets of an application.</li> <li>Create a context provider and wrap all the application components within that provider</li> </ol> <pre><code>    // ApplicationContextProvider.js\n    import React from 'react';\n    export const ApplicationContextProvider = React.createContext();\n\n\n    //App.js\n    import { ApplicationContextProvider } from './ApplicationContextProvider';\n\n    export default function App() {\n        const theme = 'dark';\n        return(\n            &lt;ApplicatoinContextProvider value = {theme}&gt;\n                // all application components go here\n            &lt;/ApplicatoinContextProvider&gt;\n        )     \n    }\n</code></pre>"},{"location":"important-aspects-develop-rest-apis/","title":"The important aspects of developing great REST APIs","text":""},{"location":"important-aspects-develop-rest-apis/#identifying-resources","title":"Identifying Resources","text":"<p>From the application domain model objects, identify the objects/resources that need to be exposed through REST APIs for users to perform actions on those resources.</p>"},{"location":"important-aspects-develop-rest-apis/#identifying-actions-get-post-put-delete","title":"Identifying Actions (GET, POST, PUT, DELETE, ...)","text":"<p>This is about identifying what are all the actions the consumers can perform on the exposed REST resources.</p>"},{"location":"important-aspects-develop-rest-apis/#defining-request-and-response-structures","title":"Defining Request and Response structures","text":""},{"location":"important-aspects-develop-rest-apis/#defining-request-structure-includes","title":"Defining Request Structure includes:","text":"<pre><code>    1 defining http verb\n    2. defining request body\n    3. defining requests parameters if any\n    4. defining request headers if any\n</code></pre>"},{"location":"important-aspects-develop-rest-apis/#defining-response-structure-includes","title":"Defining Response Structure includes:","text":"<pre><code>    1. defining response status code\n    2. defining response body\n    3. defining response headers\n</code></pre>"},{"location":"important-aspects-develop-rest-apis/#using-appropriate-response-status-code","title":"Using appropriate Response Status code","text":"<pre><code>Appropriate http response status codes need to be returned based on the action on the resource and use case scenario.\n</code></pre>"},{"location":"important-aspects-develop-rest-apis/#validation","title":"Validation","text":"<pre><code>This is about adding validations to the request body, parameters and headers.\n</code></pre>"},{"location":"important-aspects-develop-rest-apis/#internationalization-i18n","title":"Internationalization - i18n","text":"<pre><code>If the consumers for the REST API are all over the world, then adding support for different languages is required.\n</code></pre>"},{"location":"important-aspects-develop-rest-apis/#exception-handling","title":"Exception Handling","text":"<pre><code>It's important to handle error scenarios and return appropriate error codes and error messages in the response.\nThis will help the consumers of the REST APIs to decide on their side business logic in case of error scenarios.\n</code></pre>"},{"location":"important-aspects-develop-rest-apis/#hateoas","title":"HATEOAS","text":"<p>HATEOAS - Hypermedia As The Engine Of Application State</p> <ul> <li> <p>This is all about enhancing your REST API responses to tell consumers how to perform subsequent actions by including links in the response body.</p> </li> <li> <p>There is a standard defined for this : HAL - JSON Hypertext Application Language</p> </li> <li> <p>HAL - Simple format that gives a consistent and easy way to hyperlink between resources in your API</p> </li> </ul>"},{"location":"important-aspects-develop-rest-apis/#versioning","title":"Versioning","text":"<pre><code>    Versioning is important because, it will allow to implement changes in the REST APIs without breaking existing consumers code.\n</code></pre>"},{"location":"important-aspects-develop-rest-apis/#different-approaches-for-implantation","title":"Different approaches for implantation","text":"<pre><code>    1. URI path based versioning\n    2. Request parameters based versioning\n    3. Custom headers based versioning\n    4. Content Negotiation based versioning\n</code></pre>"},{"location":"important-aspects-develop-rest-apis/#factors-to-be-considered-while-deciding-the-approach-for-versioning-implementation","title":"Factors to be considered while deciding the approach for versioning implementation:","text":"<pre><code>    1. URI Pollution\n    2. Misuse of HTTP Headers\n    3. Caching\n    4. Can we execute the request on the browser?\n    5. API Documentation\n</code></pre>"},{"location":"important-aspects-develop-rest-apis/#response-content-filtering","title":"Response Content Filtering","text":""},{"location":"important-aspects-develop-rest-apis/#static-filtering","title":"Static Filtering","text":"<pre><code>This about filtering contents in the response body of REST APIs.\n\n1) password fields can't be included in the response body.\n\n2) secret values can't be included in the response body\n\n3) Related domain objects need not to be included in response body.\n\n4) Static filter is about implementing common filtering for all the APIs.\n\n5) Static filtering is usually implemented in domain object classes\n</code></pre>"},{"location":"important-aspects-develop-rest-apis/#dynamic-filtering","title":"Dynamic Filtering","text":"<ol> <li> <p>Dynamic filtering is all about implementing specific filtering for each REST API.</p> </li> <li> <p>Dynamic filtering is usually implemented in controllers.</p> </li> </ol>"},{"location":"important-aspects-develop-rest-apis/#monitoring","title":"Monitoring","text":"<p>Monitoring capability is needed in production environment.</p> <p>This should include: Application overall health status Metrics on handled http requests Metrics on runtime environment</p>"},{"location":"important-aspects-develop-rest-apis/#documentation","title":"Documentation","text":"<p>Clear documentation is important for the consumers of REST APIs Generating accurate and consistent documentation for the REST API urls Generating from code is the answer to make the documentation accurate and consistent.</p>"},{"location":"learnings-java/","title":"This section shares all my learnings about the Java language and related technologies","text":""},{"location":"learnings-react/","title":"This section shares all my learnings about the ReactJs library","text":"<p>How to use context API in react</p> <p>How to create your own custom hook for your ContectAPI</p>"},{"location":"learnings-spring-boot/","title":"This section shares all my learnings about the development and maintenance aspects of RESTful APIs","text":""},{"location":"react-hooks/","title":"React hooks","text":""},{"location":"react-hooks/#usestate-hooks","title":"useState hooks","text":"<ol> <li> <p>it can be used only within functional component</p> </li> <li> <p>useState hooks inside a functional component must be executed in the same order</p> </li> <li> <p>useState hook can't be called inside a if condition</p> </li> <li> <p>when using an object as the state value, every time you call setState call will override the previous object . ( this is not the case with functional components )</p> </li> <li> <p>using multiple useState hooks with single values is recommended approach.</p> </li> </ol>"},{"location":"react-hooks/#useeffect-hooks","title":"useEffect hooks","text":""}]}
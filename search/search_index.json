{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"I am documenting all my learnings here and if they are helpful for some other people on the internet, I am more than happy","text":""},{"location":"all-about-rest-apis/","title":"This section shares all my learnings about the development and maintenance aspects of RESTful APIs","text":"<p>1. Important aspects of developing great REST APIs</p> <p>2. Using Appropriate Http verb for designing RESTful APIs</p>"},{"location":"appropriate-http-verbs/","title":"Appropriate http verbs","text":"<p>Using appropriate HTTP verb is very important in designing REST APIs. Here's a quick overview of best practices for designing REST APIs</p> <p>When creating resources, POST or PUT requests can be used. It's important to note that POST requests are not idempotent, as they are used for creating new resources each time they are called.</p> <p>For reading resources, GET or POST requests can be used. POST requests are particularly helpful when the number of parameters is high, or the values of parameters are not easily exposable in a GET request.</p> <p>When updating resources, PUT or PATCH requests can be used. PATCH requests are useful for partial updates.</p> <p>Finally, for deleting resources, obviously DELETE requests should be used.</p>"},{"location":"custom-hook-context-api/","title":"How to create your own custom hook for the context api","text":"<p>You can create your own custom hook for the code that initilizes the context api.</p>"},{"location":"custom-hook-context-api/#steps-to-create-custom-hook","title":"Steps to create custom hook","text":"<ol> <li> <p>Create a context using React.createContext() API</p> </li> <li> <p>Create a functional component accepting 'children' as argument. This functional component will be your context provider.</p> </li> <li> <p>Inside the return function of context provider, wrap all the children within the context.</p> </li> <li> <p>Initialize the 'vaule' attribute of the context provider.</p> </li> </ol>"},{"location":"custom-hook-context-api/#example-code","title":"Example code","text":"<pre><code>import React, { useContext, useState } from \"react\";\n\nconst ThemeContext = React.createContext();\nconst ThemeUpdateContext = React.createContext();\n\nexport function useTheme() {\n  return useContext(ThemeContext);\n}\n\nexport function useThemeUpdate() {\n  return useContext(ThemeUpdateContext);\n}\n\nexport function ThemeProvider({ children }) {\n  const [darkTheme, setDarkTheme] = useState(true);\n\n  function toggleTheme() {\n    setDarkTheme((preDarkTheme) =&gt; !preDarkTheme);\n  }\n  return (\n    &lt;ThemeContext.Provider value={darkTheme}&gt;\n      &lt;ThemeUpdateContext.Provider value={toggleTheme}&gt;\n        {children}\n      &lt;/ThemeUpdateContext.Provider&gt;\n    &lt;/ThemeContext.Provider&gt;\n  );\n}\n</code></pre>"},{"location":"custom-hook-context-api/#explanation","title":"Explanation","text":"<ol> <li> <p>The above code is creating two instances of context</p> <ol> <li>one for providing 'theme' value</li> <li>another one for providing a method to update the theme value.</li> </ol> </li> <li> <p>Here two custom hooks are created 'useTheme' and 'useThemeUpdate'</p> <ol> <li>'useTheme' hooks is calling 'useContext' react hook and passing the 'ThemeContext' as the argument and returning</li> <li>'useThemeUpdate' hook is calling 'useContext' react hook and passing the 'ThemeUpdateContext' as the argument and returning</li> </ol> </li> <li> <p>The functional component 'ThemeProvider' accepting 'children' as the argument and wrapping the 'children' within the 'ThemeContext.Provider' and 'ThemeUpdateContext.Provider'</p> </li> </ol>"},{"location":"how-to-create-context-provider/","title":"How to create context provider","text":""},{"location":"how-to-create-context-provider/#context-api","title":"Context API","text":"<p>React Context APIs are one of the ways to manage application state globally</p> <ol> <li>How to create a context</li> </ol> <pre><code>const applicationContext = React.createContext();\n</code></pre> <ol> <li>Using context APIs, we can pass down the values to all the componets of an application.</li> <li>Create a context provider and wrap all the application components within that provider</li> </ol> <pre><code>    // ApplicationContextProvider.js\n    import React from 'react';\n    export const ApplicationContextProvider = React.createContext();\n\n\n    //App.js\n    import { ApplicationContextProvider } from './ApplicationContextProvider';\n\n    export default function App() {\n        const theme = 'dark';\n        return(\n            &lt;ApplicatoinContextProvider value = {theme}&gt;\n                // all application components go here\n            &lt;/ApplicatoinContextProvider&gt;\n        )     \n    }\n</code></pre>"},{"location":"learnings-java/","title":"This section shares all my learnings about the Java language and related technologies","text":""},{"location":"learnings-react/","title":"This section shares all my learnings about the ReactJs library","text":"<p>How to use context API in react</p> <p>How to create your own custom hook for your ContectAPI</p>"},{"location":"learnings-spring-boot/","title":"This section shares all my learnings about the development and maintenance aspects of RESTful APIs","text":""},{"location":"react-hooks/","title":"React hooks","text":""},{"location":"react-hooks/#usestate-hooks","title":"useState hooks","text":"<ol> <li> <p>it can be used only within functional component</p> </li> <li> <p>useState hooks inside a functional component must be executed in the same order</p> </li> <li> <p>useState hook can't be called inside a if condition</p> </li> <li> <p>when using an object as the state value, every time you call setState call will override the previous object . ( this is not the case with functional components )</p> </li> <li> <p>using multiple useState hooks with single values is recommended approach.</p> </li> </ol>"},{"location":"react-hooks/#useeffect-hooks","title":"useEffect hooks","text":""}]}